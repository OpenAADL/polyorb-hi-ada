package System_Demo

-- This system combines generic native hardware, TCP/IP protocol stack
-- and some software to build a full ping demo.

public
   with Deployment;       -- Additional properties (provided by Ocarina)
   with Buses::Ethernet;
   with Native_Sockets;

   with Software;         -- Software part for this demo

   ---------------
  -- Processor --
  ---------------

  processor the_processor
  properties
    Deployment::Execution_Platform => Native;
    Priority_Range => 0 .. 255;
  end the_processor;

   ------------
   -- SYSTEM --
   ------------

   system The_Demo
   end The_Demo;

   system implementation The_Demo.impl
   subcomponents

     -- Interconnect bus. This component is shared by Node_1 and
     -- Node_2 to support communication through TCP/IP protocol stack

     Bus_TCP      : bus Buses::Ethernet::Ethernet.impl;

     ------------------------------------------------------------------
     -- Node #1 software components

     Node_1 : process Software::Pinger_Process.Impl;

     -- Node #1 hardware components

     Processor_1  : processor the_processor;

     TCP_IP_Cnx_1 : device Native_Sockets::Native_Sockets.POHI_Ada
      { Deployment::Location    => "ip 127.0.0.1 1233"; };
     --     Beeper_1     : device Beeper::Beeper_Device.impl;

     ------------------------------------------------------------------
     -- Node #2 software components

     Node_2 : process Software::Pingee_Process.Impl;

     -- Node #2 hardware components

     Processor_2  : processor the_processor;
     TCP_IP_Cnx_2 : device Native_Sockets::Native_Sockets.POHI_Ada
      { Deployment::Location    => "ip 127.0.0.1 2345"; };


   connections

     -- By connecting the bus to the driver, and binding the
     -- connection between Node_1.Out_Port and Node_2.In_Port to the
     -- bus, we model the fact that the communication between port
     -- 'Out_Port' of Node_1 and 'In_Port' of Node_2 will use the TCP
     -- protocol stack.

     bus access Bus_TCP -> TCP_IP_Cnx_1.Eth;
     bus access Bus_TCP -> TCP_IP_Cnx_2.Eth;
     port Node_1.Out_Port -> Node_2.In_Port
          { Actual_Connection_Binding => (reference (Bus_TCP)); };

   properties

     -- By binding the device to the processor, we specify that the
     -- processor (and then any bound process) have access to this
     -- driver.

     Actual_Processor_Binding => (reference (Processor_1)) applies to Node_1;
     Actual_Processor_Binding => (reference (Processor_1))
                              applies to TCP_IP_Cnx_1;

     Actual_Processor_Binding => (reference (Processor_2)) applies to Node_2;
     Actual_Processor_Binding => (reference (Processor_2))
                              applies to TCP_IP_Cnx_2;
   end The_Demo.impl;

end System_Demo;
